package February19;

import java.util.Scanner;

 class Fraction{
	int num;
	int den;
public Fraction(int num , int den){
		this.num = num;
		this.den = den;
	}
	public void reduce() {
		int gcd = GUESSRT.gcd(this.num, this.den);
		System.out.println(gcd);
		this.num = num/gcd;
		this.den = den/gcd;
		
	}
	public void add( Fraction b) {
		//Fraction res = new Fraction(1,1);
		this.num = this.num*b.den + b.num*this.den;
		this.den = this.den*b.den;
	}
	public void sub( Fraction b) {
		//Fraction res = new Fraction(1,1);
		this.num = b.num*this.den-this.num*b.den ;
		this.den = this.den*b.den;
	}
	public void multiply( Fraction b) {
		//Fraction res = new Fraction(1,1);
		this.num = this.num*b.num;
		this.den = this.den*b.den;
	}
}
 
 
public class GUESSRT {
	
	
	public static int gcd(int a , int b) {
		if(a<b) {
			return gcd(b,a);
		}
		if(b==0) {
			return a;
		}
		return gcd(b,a%b);
	}
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int T = s.nextInt();
		for(int t=0;t<T;t++) {
			int N = s.nextInt();
			int K = s.nextInt();
			int M = s.nextInt();
			Fraction finalProb = new Fraction(0,1);
			Fraction currProb = new Fraction(0,1);
			Fraction prevProb = currProb;
			
			

			Fraction sample = new Fraction(1,1);
			int mov = 1;
			if(N<=K) {
				currProb.num = 1;
				currProb.den = N;
				finalProb.add(currProb);
				System.out.println(finalProb.num+" "+finalProb.den);
				prevProb = currProb;
				mov++;
				N+=K;
			}
			else if(N>K) {
				N = N%K;
				mov++;
			}
			while(mov<=M) {
				if(N<=K ) {
					currProb.num = 1;
					currProb.den = N;
					prevProb.sub(sample);
					currProb.multiply(prevProb);
					prevProb = currProb;
					finalProb.add(currProb);
					currProb = null;
					mov++;
					N+=K;
					continue;
				}
				else if(N>K && mov!=M) {
					N = N%K;
					mov++;
				}
				else if(N>K && mov==M) {
					currProb.num = 1;
					currProb.den = N;
					System.out.println("Curr-> "+currProb.num+" "+currProb.den);
					System.out.println("Prev-> "+prevProb.num+" "+prevProb.den);

					prevProb.sub(sample);

					currProb.multiply(prevProb);
					finalProb.add(currProb);
					mov++;
				}
			}
			System.out.println(finalProb.num+" "+finalProb.den);
			
		}
	}
}

