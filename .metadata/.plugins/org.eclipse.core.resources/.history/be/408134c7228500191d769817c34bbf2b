import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BitwiseOR {
	static class FastReader 

    { 
        BufferedReader br; 
        StringTokenizer st; 
  
        public FastReader() 
        { 
            br = new BufferedReader(new
                     InputStreamReader(System.in)); 
        } 
  
        String next() 
        { 
            while (st == null || !st.hasMoreElements()) 
            { 
                try
                { 
                    st = new StringTokenizer(br.readLine()); 
                } 
                catch (IOException  e) 
                { 
                    e.printStackTrace(); 
                } 
            } 
            return st.nextToken(); 
        } 
  
        int nextInt() 
        { 
            return Integer.parseInt(next()); 
        } 
  
        long nextLong() 
        { 
            return Long.parseLong(next()); 
        } 
  
        double nextDouble() 
        { 
            return Double.parseDouble(next()); 
        } 
  
        String nextLine() 
        { 
            String str = ""; 
            try
            { 
                str = br.readLine(); 
            } 
            catch (IOException e) 
            { 
                e.printStackTrace(); 
            } 
            return str; 
        } 
    } 
	
	static long mod = (long)Math.pow(10,9)+7;
	public static long modRecursive(long a, long b, long mod) {
		if(b==0) {
			return 1;
		}
		else if(b%2==0) {
			return (modRecursive((a*a)%mod,b/2,mod));
		}
		else{
			return ((a%mod)*modRecursive((a*a)%mod,b/2,mod))%mod;
		}
	}
	public static void main(String[] args) {
		FastReader s = new FastReader();
		long N = s.nextLong();
		long N = modRecursive(2,5,mod);
		
	}
}
